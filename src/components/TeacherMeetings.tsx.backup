'use client';

import { useState } from 'react';
import { TeacherMeeting } from '@/types/teacher';
import { Plus, Edit, Trash2, Calendar, MapPin, Users, Clock, AlertCircle } from 'lucide-react';
import { useData } from '@/contexts/DataContext';

export function TeacherMeetings() {
  const { meetings, addMeeting, updateMeeting, deleteMeeting } = useData();
  const [showAddForm, setShowAddForm] = useState(false);
  const [editingMeeting, setEditingMeeting] = useState<TeacherMeeting | null>(null);
  const [filterType, setFilterType] = useState<string>('all');
  const [filterStatus, setFilterStatus] = useState<string>('all');

  const filteredMeetings = meetings.filter(meeting => {
    const typeMatch = filterType === 'all' || meeting.type === filterType;
    const statusMatch = filterStatus === 'all' || meeting.status === filterStatus;
    return typeMatch && statusMatch;
  });

  const handleAddMeeting = (newMeeting: Omit<TeacherMeeting, 'id'>) => {
    addMeeting(newMeeting);
    setShowAddForm(false);
  };

  const handleEditMeeting = (updatedMeeting: TeacherMeeting) => {
    updateMeeting(updatedMeeting);
    setEditingMeeting(null);
  };

  const handleDeleteMeeting = (meetingId: string) => {
    if (confirm('Are you sure you want to delete this meeting?')) {
      deleteMeeting(meetingId);
    }
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'hr': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'senior': return 'bg-purple-100 text-purple-800 border-purple-200';
      case 'performance': return 'bg-green-100 text-green-800 border-green-200';
      case 'training': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'disciplinary': return 'bg-red-100 text-red-800 border-red-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'scheduled': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'completed': return 'bg-green-100 text-green-800 border-green-200';
      case 'cancelled': return 'bg-red-100 text-red-800 border-red-200';
      case 'rescheduled': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getPriorityIcon = (priority: string) => {
    switch (priority) {
      case 'high': return 'üî¥';
      case 'medium': return 'üü°';
      case 'low': return 'üü¢';
      default: return '‚ö™';
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-slate-200">
        <div className="px-4 py-6 sm:px-6 lg:px-8">
          <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 mb-6">
            <div>
              <h1 className="text-xl sm:text-2xl font-bold text-slate-800">Teacher Meetings</h1>
              <p className="text-sm sm:text-base text-slate-600 mt-1">Schedule and manage meetings with teachers</p>
            </div>
            <button
              onClick={() => setShowAddForm(true)}
              className="bg-[#B43F3F] text-white px-4 py-2 sm:px-6 sm:py-3 rounded-lg hover:bg-[#A03636] transition-colors font-medium flex items-center justify-center gap-2 text-sm sm:text-base"
            >
              <Plus className="w-4 h-4" />
              Schedule Meeting
            </button>
          </div>

          {/* Filters */}
          <div className="flex gap-4 mb-4">
            <select
              value={filterType}
              onChange={(e) => setFilterType(e.target.value)}
              className="px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
            >
              <option value="all">All Types</option>
              <option value="hr">HR</option>
              <option value="senior">Senior Staff</option>
              <option value="performance">Performance</option>
              <option value="training">Training</option>
              <option value="disciplinary">Disciplinary</option>
            </select>
            <select
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value)}
              className="px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
            >
              <option value="all">All Status</option>
              <option value="scheduled">Scheduled</option>
              <option value="completed">Completed</option>
              <option value="cancelled">Cancelled</option>
              <option value="rescheduled">Rescheduled</option>
            </select>
          </div>
            onChange={(e) => setFilterType(e.target.value)}
            className="px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
          >
            <option value="all">All Types</option>
            <option value="hr">HR</option>
            <option value="senior">Senior Staff</option>
            <option value="performance">Performance</option>
            <option value="training">Training</option>
            <option value="disciplinary">Disciplinary</option>
          </select>
          <select
            value={filterStatus}
            onChange={(e) => setFilterStatus(e.target.value)}
            className="px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
          >
            <option value="all">All Status</option>
            <option value="scheduled">Scheduled</option>
            <option value="completed">Completed</option>
            <option value="cancelled">Cancelled</option>
            <option value="rescheduled">Rescheduled</option>
          </select>
        </div>
      </div>

      {/* Meetings List */}
      <div className="space-y-4">
        {filteredMeetings.map((meeting) => (
          <div key={meeting.id} className="bg-white border border-slate-200 rounded-lg p-6 shadow-sm hover:shadow-md transition-shadow">
            <div className="flex items-start justify-between mb-4">
              <div className="flex-1">
                <div className="flex items-center gap-3 mb-2">
                  <h3 className="text-lg font-semibold text-slate-800">{meeting.title}</h3>
                  <span className={`px-2 py-1 rounded-full text-xs font-medium border ${getTypeColor(meeting.type)}`}>
                    {meeting.type.toUpperCase()}
                  </span>
                  <span className={`px-2 py-1 rounded-full text-xs font-medium border ${getStatusColor(meeting.status)}`}>
                    {meeting.status}
                  </span>
                  <span className="text-lg">{getPriorityIcon(meeting.priority)}</span>
                </div>
                <p className="text-slate-600 mb-2">{meeting.teacherName}</p>
                <p className="text-sm text-slate-500">{meeting.agenda}</p>
              </div>
              <div className="flex gap-2">
                <button
                  onClick={() => setEditingMeeting(meeting)}
                  className="bg-slate-800 text-white px-3 py-1 rounded text-sm hover:bg-slate-700 transition-colors"
                >
                  Edit
                </button>
                <button
                  onClick={() => handleDeleteMeeting(meeting.id)}
                  className="bg-[#B43F3F] text-white px-3 py-1 rounded text-sm hover:bg-[#A03636] transition-colors"
                >
                  Delete
                </button>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm">
              <div>
                <p className="text-slate-600 font-medium">Date & Time</p>
                <p className="text-slate-800">{new Date(meeting.date).toLocaleDateString()}</p>
                <p className="text-slate-800">{meeting.startTime} - {meeting.endTime}</p>
              </div>
              <div>
                <p className="text-slate-600 font-medium">Location</p>
                <p className="text-slate-800">{meeting.location}</p>
              </div>
              <div>
                <p className="text-slate-600 font-medium">Attendees</p>
                <p className="text-slate-800">{meeting.attendees.join(', ')}</p>
              </div>
              <div>
                <p className="text-slate-600 font-medium">Created By</p>
                <p className="text-slate-800">{meeting.createdBy}</p>
                <p className="text-slate-500 text-xs">{new Date(meeting.createdAt).toLocaleDateString()}</p>
              </div>
            </div>

            {meeting.notes && (
              <div className="mt-4 p-3 bg-slate-50 rounded-lg">
                <p className="text-slate-600 font-medium text-sm mb-1">Notes</p>
                <p className="text-slate-800 text-sm">{meeting.notes}</p>
              </div>
            )}
          </div>
        ))}
      </div>

      {filteredMeetings.length === 0 && (
        <div className="text-center py-12">
          <div className="text-6xl mb-4">ü§ù</div>
          <h3 className="text-xl font-semibold text-slate-800 mb-2">No meetings found</h3>
          <p className="text-slate-600">
            {filterType !== 'all' || filterStatus !== 'all' 
              ? 'Try adjusting your filters' 
              : 'Schedule your first meeting to get started'}
          </p>
        </div>
      )}

      {/* Add/Edit Meeting Modal */}
      {(showAddForm || editingMeeting) && (
        <MeetingFormModal
          meeting={editingMeeting}
          onSave={editingMeeting ? handleEditMeeting : handleAddMeeting}
          onCancel={() => {
            setShowAddForm(false);
            setEditingMeeting(null);
          }}
        />
      )}
    </div>
  );
}

interface MeetingFormModalProps {
  meeting?: TeacherMeeting | null;
  onSave: (meeting: any) => void;
  onCancel: () => void;
}

function MeetingFormModal({ meeting, onSave, onCancel }: MeetingFormModalProps) {
  const [formData, setFormData] = useState({
    teacherId: meeting?.teacherId || '',
    teacherName: meeting?.teacherName || '',
    title: meeting?.title || '',
    type: meeting?.type || 'hr',
    date: meeting?.date || '',
    startTime: meeting?.startTime || '',
    endTime: meeting?.endTime || '',
    location: meeting?.location || '',
    attendees: meeting?.attendees?.join(', ') || '',
    agenda: meeting?.agenda || '',
    notes: meeting?.notes || '',
    status: meeting?.status || 'scheduled',
    priority: meeting?.priority || 'medium',
    createdBy: meeting?.createdBy || 'Admin',
    createdAt: meeting?.createdAt || new Date().toISOString(),
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const meetingData = {
      ...formData,
      attendees: formData.attendees.split(',').map(a => a.trim()).filter(a => a),
      ...(meeting && { id: meeting.id }),
    };
    onSave(meetingData);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <h2 className="text-xl font-bold text-slate-800 mb-6">
          {meeting ? 'Edit Meeting' : 'Schedule New Meeting'}
        </h2>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-1">Teacher Name</label>
              <input
                type="text"
                required
                value={formData.teacherName}
                onChange={(e) => setFormData({ ...formData, teacherName: e.target.value })}
                className="w-full px-3 py-2 border border-slate-300 rounded focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-1">Meeting Type</label>
              <select
                value={formData.type}
                onChange={(e) => setFormData({ ...formData, type: e.target.value as any })}
                className="w-full px-3 py-2 border border-slate-300 rounded focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
              >
                <option value="hr">HR</option>
                <option value="senior">Senior Staff</option>
                <option value="performance">Performance</option>
                <option value="training">Training</option>
                <option value="disciplinary">Disciplinary</option>
              </select>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-slate-700 mb-1">Meeting Title</label>
            <input
              type="text"
              required
              value={formData.title}
              onChange={(e) => setFormData({ ...formData, title: e.target.value })}
              className="w-full px-3 py-2 border border-slate-300 rounded focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-1">Date</label>
              <input
                type="date"
                required
                value={formData.date}
                onChange={(e) => setFormData({ ...formData, date: e.target.value })}
                className="w-full px-3 py-2 border border-slate-300 rounded focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-1">Start Time</label>
              <input
                type="time"
                required
                value={formData.startTime}
                onChange={(e) => setFormData({ ...formData, startTime: e.target.value })}
                className="w-full px-3 py-2 border border-slate-300 rounded focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-1">End Time</label>
              <input
                type="time"
                required
                value={formData.endTime}
                onChange={(e) => setFormData({ ...formData, endTime: e.target.value })}
                className="w-full px-3 py-2 border border-slate-300 rounded focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
              />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-1">Location</label>
              <input
                type="text"
                required
                value={formData.location}
                onChange={(e) => setFormData({ ...formData, location: e.target.value })}
                className="w-full px-3 py-2 border border-slate-300 rounded focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-1">Priority</label>
              <select
                value={formData.priority}
                onChange={(e) => setFormData({ ...formData, priority: e.target.value as any })}
                className="w-full px-3 py-2 border border-slate-300 rounded focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
              >
                <option value="low">Low</option>
                <option value="medium">Medium</option>
                <option value="high">High</option>
              </select>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-slate-700 mb-1">Attendees (comma-separated)</label>
            <input
              type="text"
              value={formData.attendees}
              onChange={(e) => setFormData({ ...formData, attendees: e.target.value })}
              placeholder="HR Manager, Academic Director, Principal"
              className="w-full px-3 py-2 border border-slate-300 rounded focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-slate-700 mb-1">Agenda</label>
            <textarea
              required
              value={formData.agenda}
              onChange={(e) => setFormData({ ...formData, agenda: e.target.value })}
              rows={3}
              className="w-full px-3 py-2 border border-slate-300 rounded focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-slate-700 mb-1">Notes (optional)</label>
            <textarea
              value={formData.notes}
              onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
              rows={2}
              className="w-full px-3 py-2 border border-slate-300 rounded focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-slate-700 mb-1">Status</label>
            <select
              value={formData.status}
              onChange={(e) => setFormData({ ...formData, status: e.target.value as any })}
              className="w-full px-3 py-2 border border-slate-300 rounded focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
            >
              <option value="scheduled">Scheduled</option>
              <option value="completed">Completed</option>
              <option value="cancelled">Cancelled</option>
              <option value="rescheduled">Rescheduled</option>
            </select>
          </div>

          <div className="flex gap-3 pt-4">
            <button
              type="submit"
              className="flex-1 bg-[#B43F3F] text-white py-2 px-4 rounded hover:bg-[#A03636] transition-colors font-medium"
            >
              {meeting ? 'Update Meeting' : 'Schedule Meeting'}
            </button>
            <button
              type="button"
              onClick={onCancel}
              className="flex-1 bg-slate-300 text-slate-700 py-2 px-4 rounded hover:bg-slate-400 transition-colors font-medium"
            >
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
