'use client';

import { useState } from 'react';
import { TeacherLeave } from '@/types/teacher';
import { useData } from '@/contexts/DataContext';

export function TeacherLeaves() {
  const { leaves, addLeave, updateLeave, deleteLeave, approveLeave, rejectLeave } = useData();
  const [showAddForm, setShowAddForm] = useState(false);
  const [editingLeave, setEditingLeave] = useState<TeacherLeave | null>(null);
  const [filterType, setFilterType] = useState<string>('all');
  const [filterStatus, setFilterStatus] = useState<string>('all');

  const filteredLeaves = leaves.filter(leave => {
    const typeMatch = filterType === 'all' || leave.type === filterType;
    const statusMatch = filterStatus === 'all' || leave.status === filterStatus;
    return typeMatch && statusMatch;
  });

  const handleAddLeave = (newLeave: Omit<TeacherLeave, 'id'>) => {
    addLeave(newLeave);
    setShowAddForm(false);
  };

  const handleEditLeave = (updatedLeave: TeacherLeave) => {
    updateLeave(updatedLeave);
    setEditingLeave(null);
  };

  const handleDeleteLeave = (leaveId: string) => {
    if (confirm('Are you sure you want to delete this leave request?')) {
      deleteLeave(leaveId);
    }
  };

  const handleApproveLeave = (leaveId: string) => {
    approveLeave(leaveId);
  };

  const handleRejectLeave = (leaveId: string) => {
    rejectLeave(leaveId);
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'sick': return 'bg-red-100 text-red-800 border-red-200';
      case 'vacation': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'personal': return 'bg-purple-100 text-purple-800 border-purple-200';
      case 'emergency': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'maternity': return 'bg-pink-100 text-pink-800 border-pink-200';
      case 'paternity': return 'bg-indigo-100 text-indigo-800 border-indigo-200';
      case 'training': return 'bg-green-100 text-green-800 border-green-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'approved': return 'bg-green-100 text-green-800 border-green-200';
      case 'rejected': return 'bg-red-100 text-red-800 border-red-200';
      case 'cancelled': return 'bg-gray-100 text-gray-800 border-gray-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'sick': return 'ü§í';
      case 'vacation': return 'üèñÔ∏è';
      case 'personal': return 'üë§';
      case 'emergency': return 'üö®';
      case 'maternity': return 'ü§±';
      case 'paternity': return 'üë®‚Äçüë∂';
      case 'training': return 'üìö';
      default: return 'üìã';
    }
  };

  // Calculate statistics
  const totalLeaves = leaves.length;
  const pendingLeaves = leaves.filter(l => l.status === 'pending').length;
  const approvedLeaves = leaves.filter(l => l.status === 'approved').length;
  const totalDays = leaves.filter(l => l.status === 'approved').reduce((sum, l) => sum + l.days, 0);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-slate-200">
        <div className="px-4 py-6 sm:px-6 lg:px-8">
          <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 mb-6">
            <div>
              <h1 className="text-xl sm:text-2xl font-bold text-slate-800">Teacher Leaves</h1>
              <p className="text-sm sm:text-base text-slate-600 mt-1">Manage leave requests and approvals</p>
              <div>
                <p className="text-sm text-slate-600">Total Requests</p>
                <p className="text-2xl font-bold text-slate-800">{totalLeaves}</p>
              </div>
              <div className="text-2xl">üìã</div>
            </div>
          </div>
          <div className="bg-white border border-slate-200 rounded-lg p-4 shadow-sm">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-slate-600">Pending</p>
                <p className="text-2xl font-bold text-yellow-600">{pendingLeaves}</p>
              </div>
              <div className="text-2xl">‚è≥</div>
            </div>
          </div>
          <div className="bg-white border border-slate-200 rounded-lg p-4 shadow-sm">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-slate-600">Approved</p>
                <p className="text-2xl font-bold text-green-600">{approvedLeaves}</p>
              </div>
              <div className="text-2xl">‚úÖ</div>
            </div>
          </div>
          <div className="bg-white border border-slate-200 rounded-lg p-4 shadow-sm">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-slate-600">Total Days</p>
                <p className="text-2xl font-bold text-slate-800">{totalDays}</p>
              </div>
              <div className="text-2xl">üìÖ</div>
            </div>
          </div>
        </div>

        {/* Filters */}
        <div className="flex gap-4 mb-4">
          <select
            value={filterType}
            onChange={(e) => setFilterType(e.target.value)}
            className="px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
          >
            <option value="all">All Types</option>
            <option value="sick">Sick Leave</option>
            <option value="vacation">Vacation</option>
            <option value="personal">Personal</option>
            <option value="emergency">Emergency</option>
            <option value="maternity">Maternity</option>
            <option value="paternity">Paternity</option>
            <option value="training">Training</option>
          </select>
          <select
            value={filterStatus}
            onChange={(e) => setFilterStatus(e.target.value)}
            className="px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
          >
            <option value="all">All Status</option>
            <option value="pending">Pending</option>
            <option value="approved">Approved</option>
            <option value="rejected">Rejected</option>
            <option value="cancelled">Cancelled</option>
          </select>
        </div>
      </div>

      {/* Leaves List */}
      <div className="space-y-4">
        {filteredLeaves.map((leave) => (
          <div key={leave.id} className="bg-white border border-slate-200 rounded-lg p-6 shadow-sm hover:shadow-md transition-shadow">
            <div className="flex items-start justify-between mb-4">
              <div className="flex items-center gap-3">
                <div className="text-2xl">{getTypeIcon(leave.type)}</div>
                <div>
                  <h3 className="text-lg font-semibold text-slate-800">{leave.teacherName}</h3>
                  <div className="flex items-center gap-2 mt-1">
                    <span className={`px-2 py-1 rounded-full text-xs font-medium border ${getTypeColor(leave.type)}`}>
                      {leave.type.replace('_', ' ').toUpperCase()}
                    </span>
                    <span className={`px-2 py-1 rounded-full text-xs font-medium border ${getStatusColor(leave.status)}`}>
                      {leave.status.toUpperCase()}
                    </span>
                  </div>
                </div>
              </div>
              <div className="flex gap-2">
                {leave.status === 'pending' && (
                  <>
                    <button
                      onClick={() => handleApproveLeave(leave.id)}
                      className="bg-green-600 text-white px-3 py-1 rounded text-sm hover:bg-green-700 transition-colors"
                    >
                      Approve
                    </button>
                    <button
                      onClick={() => handleRejectLeave(leave.id)}
                      className="bg-red-600 text-white px-3 py-1 rounded text-sm hover:bg-red-700 transition-colors"
                    >
                      Reject
                    </button>
                  </>
                )}
                <button
                  onClick={() => setEditingLeave(leave)}
                  className="bg-slate-800 text-white px-3 py-1 rounded text-sm hover:bg-slate-700 transition-colors"
                >
                  Edit
                </button>
                <button
                  onClick={() => handleDeleteLeave(leave.id)}
                  className="bg-[#B43F3F] text-white px-3 py-1 rounded text-sm hover:bg-[#A03636] transition-colors"
                >
                  Delete
                </button>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm mb-4">
              <div>
                <p className="text-slate-600 font-medium">Duration</p>
                <p className="text-slate-800">{new Date(leave.startDate).toLocaleDateString()}</p>
                <p className="text-slate-800">to {new Date(leave.endDate).toLocaleDateString()}</p>
                <p className="text-slate-600 text-xs">{leave.days} day{leave.days !== 1 ? 's' : ''}</p>
              </div>
              <div>
                <p className="text-slate-600 font-medium">Applied Date</p>
                <p className="text-slate-800">{new Date(leave.appliedDate).toLocaleDateString()}</p>
              </div>
              {leave.approvedBy && (
                <div>
                  <p className="text-slate-600 font-medium">Approved By</p>
                  <p className="text-slate-800">{leave.approvedBy}</p>
                  {leave.approvedDate && (
                    <p className="text-slate-500 text-xs">{new Date(leave.approvedDate).toLocaleDateString()}</p>
                  )}
                </div>
              )}
              <div>
                <p className="text-slate-600 font-medium">Status</p>
                <p className="text-slate-800 capitalize">{leave.status}</p>
              </div>
            </div>

            <div className="mb-4">
              <p className="text-slate-600 font-medium text-sm mb-1">Reason</p>
              <p className="text-slate-800 text-sm">{leave.reason}</p>
            </div>

            {leave.comments && (
              <div className="p-3 bg-slate-50 rounded-lg">
                <p className="text-slate-600 font-medium text-sm mb-1">Comments</p>
                <p className="text-slate-800 text-sm">{leave.comments}</p>
              </div>
            )}
          </div>
        ))}
      </div>

      {filteredLeaves.length === 0 && (
        <div className="text-center py-12">
          <div className="text-6xl mb-4">üìã</div>
          <h3 className="text-xl font-semibold text-slate-800 mb-2">No leave requests found</h3>
          <p className="text-slate-600">
            {filterType !== 'all' || filterStatus !== 'all' 
              ? 'Try adjusting your filters' 
              : 'Add your first leave request to get started'}
          </p>
        </div>
      )}

      {/* Add/Edit Leave Modal */}
      {(showAddForm || editingLeave) && (
        <LeaveFormModal
          leave={editingLeave}
          onSave={editingLeave ? handleEditLeave : handleAddLeave}
          onCancel={() => {
            setShowAddForm(false);
            setEditingLeave(null);
          }}
        />
      )}
    </div>
  );
}

interface LeaveFormModalProps {
  leave?: TeacherLeave | null;
  onSave: (leave: any) => void;
  onCancel: () => void;
}

function LeaveFormModal({ leave, onSave, onCancel }: LeaveFormModalProps) {
  const [formData, setFormData] = useState({
    teacherId: leave?.teacherId || '',
    teacherName: leave?.teacherName || '',
    type: leave?.type || 'vacation',
    startDate: leave?.startDate || '',
    endDate: leave?.endDate || '',
    reason: leave?.reason || '',
    status: leave?.status || 'pending',
    appliedDate: leave?.appliedDate || new Date().toISOString().split('T')[0],
    comments: leave?.comments || '',
  });

  // Calculate days automatically
  const calculateDays = () => {
    if (formData.startDate && formData.endDate) {
      const start = new Date(formData.startDate);
      const end = new Date(formData.endDate);
      const diffTime = Math.abs(end.getTime() - start.getTime());
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;
      return diffDays;
    }
    return 1;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const leaveData = {
      ...formData,
      days: calculateDays(),
      ...(leave && { id: leave.id }),
    };
    onSave(leaveData);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <h2 className="text-xl font-bold text-slate-800 mb-6">
          {leave ? 'Edit Leave Request' : 'Add New Leave Request'}
        </h2>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-1">Teacher Name</label>
              <input
                type="text"
                required
                value={formData.teacherName}
                onChange={(e) => setFormData({ ...formData, teacherName: e.target.value })}
                className="w-full px-3 py-2 border border-slate-300 rounded focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-1">Leave Type</label>
              <select
                value={formData.type}
                onChange={(e) => setFormData({ ...formData, type: e.target.value as any })}
                className="w-full px-3 py-2 border border-slate-300 rounded focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
              >
                <option value="sick">Sick Leave</option>
                <option value="vacation">Vacation</option>
                <option value="personal">Personal</option>
                <option value="emergency">Emergency</option>
                <option value="maternity">Maternity</option>
                <option value="paternity">Paternity</option>
                <option value="training">Training</option>
              </select>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-1">Start Date</label>
              <input
                type="date"
                required
                value={formData.startDate}
                onChange={(e) => setFormData({ ...formData, startDate: e.target.value })}
                className="w-full px-3 py-2 border border-slate-300 rounded focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-1">End Date</label>
              <input
                type="date"
                required
                value={formData.endDate}
                onChange={(e) => setFormData({ ...formData, endDate: e.target.value })}
                className="w-full px-3 py-2 border border-slate-300 rounded focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
              />
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-slate-700 mb-1">
              Duration: {calculateDays()} day{calculateDays() !== 1 ? 's' : ''}
            </label>
            <div className="text-sm text-slate-600">
              Automatically calculated based on start and end dates
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-slate-700 mb-1">Reason</label>
            <textarea
              required
              value={formData.reason}
              onChange={(e) => setFormData({ ...formData, reason: e.target.value })}
              rows={3}
              className="w-full px-3 py-2 border border-slate-300 rounded focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
              placeholder="Please provide a detailed reason for the leave request..."
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-1">Applied Date</label>
              <input
                type="date"
                required
                value={formData.appliedDate}
                onChange={(e) => setFormData({ ...formData, appliedDate: e.target.value })}
                className="w-full px-3 py-2 border border-slate-300 rounded focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-1">Status</label>
              <select
                value={formData.status}
                onChange={(e) => setFormData({ ...formData, status: e.target.value as any })}
                className="w-full px-3 py-2 border border-slate-300 rounded focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
              >
                <option value="pending">Pending</option>
                <option value="approved">Approved</option>
                <option value="rejected">Rejected</option>
                <option value="cancelled">Cancelled</option>
              </select>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-slate-700 mb-1">Comments (optional)</label>
            <textarea
              value={formData.comments}
              onChange={(e) => setFormData({ ...formData, comments: e.target.value })}
              rows={2}
              className="w-full px-3 py-2 border border-slate-300 rounded focus:outline-none focus:ring-2 focus:ring-[#B43F3F]"
              placeholder="Additional comments or notes..."
            />
          </div>

          <div className="flex gap-3 pt-4">
            <button
              type="submit"
              className="flex-1 bg-[#B43F3F] text-white py-2 px-4 rounded hover:bg-[#A03636] transition-colors font-medium"
            >
              {leave ? 'Update Leave Request' : 'Add Leave Request'}
            </button>
            <button
              type="button"
              onClick={onCancel}
              className="flex-1 bg-slate-300 text-slate-700 py-2 px-4 rounded hover:bg-slate-400 transition-colors font-medium"
            >
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
