'use client';

import { useState } from 'react';
import { TeacherAnalytics, SubjectStats } from '@/types/teacher';
import { 
  Users, 
  GraduationCap, 
  BookOpen, 
  DollarSign, 
  Star, 
  TrendingUp,
  Calendar,
  BarChart3
} from 'lucide-react';

interface DashboardReportsProps {
  teacherAnalytics: TeacherAnalytics[];
  subjectStats: SubjectStats[];
}

export function DashboardReports({ teacherAnalytics, subjectStats }: DashboardReportsProps) {
  const [selectedView, setSelectedView] = useState<'overview' | 'subjects' | 'performance'>('overview');
  const [selectedMonth, setSelectedMonth] = useState('December 2024');

  // Calculate totals
  const totalTeachers = teacherAnalytics.length;
  const totalClasses = teacherAnalytics.reduce((sum, teacher) => sum + teacher.totalClasses, 0);
  const totalEarnings = teacherAnalytics.reduce((sum, teacher) => sum + teacher.monthlyEarnings, 0);
  const averageRating = teacherAnalytics.reduce((sum, teacher) => sum + teacher.averageRating, 0) / teacherAnalytics.length;

  const currentDate = new Date();
  const currentMonth = currentDate.toLocaleString('default', { month: 'long', year: 'numeric' });

  return (
    <div className="min-h-screen bg-white">
      {/* Header */}
      <div className="px-4 py-6 sm:px-6 lg:px-8">
        <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 mb-6">
          <div>
            <h1 className="text-xl sm:text-2xl font-bold text-slate-800">Dashboard & Reports</h1>
            <p className="text-sm sm:text-base text-slate-600 mt-1">Overview of teaching activities and performance metrics</p>
          </div>
          <div className="flex gap-2">
            <div className="flex gap-1 bg-slate-200 p-1 rounded-lg">
              <button
                onClick={() => setSelectedView('overview')}
                className={`px-3 py-2 text-sm rounded-md font-medium transition-colors ${
                  selectedView === 'overview'
                    ? 'bg-white text-slate-800 shadow-sm'
                    : 'text-slate-600 hover:text-slate-800'
                }`}
              >
                Overview
              </button>
              <button
                onClick={() => setSelectedView('analytics')}
                className={`px-3 py-2 text-sm rounded-md font-medium transition-colors ${
                  selectedView === 'analytics'
                    ? 'bg-white text-slate-800 shadow-sm'
                    : 'text-slate-600 hover:text-slate-800'
                }`}
              >
                Analytics
              </button>
            </div>
          </div>
            >
              {tab.label}
            </button>
          ))}
        </div>
      </div>

      {/* Main Content Grid */}
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 lg:gap-6 mb-6 lg:mb-8">
        <StatCard
          title="Total Teachers"
          value={totalTeachers.toString()}
          icon={Users}
          color="bg-slate-800"
          change="+2 this month"
        />
        <StatCard
          title="Average Rating"
          value={averageRating.toFixed(1)}
          icon={Star}
          color="bg-slate-800"
          change="+0.2 this month"
        />
        <StatCard
          title="Total Classes"
          value={totalClasses.toString()}
          icon={BookOpen}
          color="bg-slate-800"
          change="+28 this month"
        />
        <StatCard
          title="Monthly Revenue"
          value={`$${totalEarnings.toLocaleString()}`}
          icon={DollarSign}
          color="bg-[#B43F3F]"
          change="+12% this month"
        />
      </div>

      {selectedView === 'overview' && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Teacher Performance Chart */}
          <div className="bg-white p-6 rounded-lg shadow-sm border border-slate-200">
            <h3 className="text-lg font-semibold text-slate-800 mb-4">Teacher Performance</h3>
            <div className="space-y-4">
              {teacherAnalytics.map((teacher) => (
                <div key={teacher.teacherId} className="flex items-center justify-between p-3 bg-slate-50 rounded-lg">
                  <div className="flex items-center gap-3">
                    <div className="w-10 h-10 bg-slate-800 rounded-full flex items-center justify-center text-white font-semibold text-sm">
                      {teacher.teacherName.split(' ').map(n => n[0]).join('')}
                    </div>
                    <div>
                      <p className="font-medium text-slate-800">{teacher.teacherName}</p>
                      <p className="text-sm text-slate-600">{teacher.subjects.join(', ')}</p>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="font-semibold text-slate-800">⭐ {teacher.averageRating}</p>
                    <p className="text-sm text-slate-600">{teacher.totalStudents} students</p>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Monthly Calendar */}
          <div className="bg-white p-6 rounded-lg shadow-sm border border-slate-200">
            <h3 className="text-lg font-semibold text-slate-800 mb-4">Calendar - {currentMonth}</h3>
            <SimpleCalendar />
          </div>
        </div>
      )}

      {selectedView === 'subjects' && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Subject Statistics */}
          <div className="bg-white p-6 rounded-lg shadow-sm border border-slate-200">
            <h3 className="text-lg font-semibold text-slate-800 mb-4">Subject Statistics</h3>
            <div className="space-y-4">
              {subjectStats.map((subject) => (
                <div key={subject.subject} className="p-4 border border-slate-200 rounded-lg">
                  <div className="flex justify-between items-start mb-2">
                    <h4 className="font-medium text-slate-800">{subject.subject}</h4>
                    <span className="text-sm bg-slate-100 text-slate-700 px-2 py-1 rounded">
                      {subject.teacherCount} teacher{subject.teacherCount !== 1 ? 's' : ''}
                    </span>
                  </div>
                  <div className="text-sm text-slate-600 mb-2">
                    Teachers: {subject.teachers.join(', ')}
                  </div>
                  <div className="flex justify-between text-sm">
                    <span>Students: {subject.totalStudents}</span>
                    <span>Rating: ⭐ {subject.averageRating}</span>
                  </div>
                  {/* Visual bar for students */}
                  <div className="mt-2 bg-slate-200 rounded-full h-2">
                    <div
                      className="bg-[#B43F3F] h-2 rounded-full"
                      style={{ width: `${(subject.totalStudents / Math.max(...subjectStats.map(s => s.totalStudents))) * 100}%` }}
                    ></div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Subject Distribution Chart */}
          <div className="bg-white p-6 rounded-lg shadow-sm border border-slate-200">
            <h3 className="text-lg font-semibold text-slate-800 mb-4">Subject Distribution</h3>
            <div className="space-y-3">
              {subjectStats.map((subject, index) => {
                const maxStudents = Math.max(...subjectStats.map(s => s.totalStudents));
                const percentage = (subject.totalStudents / maxStudents) * 100;
                const colors = ['bg-blue-500', 'bg-green-500', 'bg-purple-500', 'bg-[#B43F3F]', 'bg-yellow-500', 'bg-indigo-500'];
                return (
                  <div key={subject.subject} className="flex items-center gap-3">
                    <div className={`w-4 h-4 rounded ${colors[index % colors.length]}`}></div>
                    <div className="flex-1">
                      <div className="flex justify-between text-sm mb-1">
                        <span className="font-medium text-slate-800">{subject.subject}</span>
                        <span className="text-slate-600">{percentage.toFixed(1)}%</span>
                      </div>
                      <div className="bg-slate-200 rounded-full h-2">
                        <div
                          className={`h-2 rounded-full ${colors[index % colors.length]}`}
                          style={{ width: `${percentage}%` }}
                        ></div>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      )}

      {selectedView === 'performance' && (
        <div className="grid grid-cols-1 gap-6">
          {/* Detailed Performance Table */}
          <div className="bg-white p-6 rounded-lg shadow-sm border border-slate-200">
            <h3 className="text-lg font-semibold text-slate-800 mb-4">Detailed Performance Metrics</h3>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b border-slate-200">
                    <th className="text-left py-3 px-4 font-medium text-slate-700">Teacher</th>
                    <th className="text-left py-3 px-4 font-medium text-slate-700">Subjects</th>
                    <th className="text-center py-3 px-4 font-medium text-slate-700">Students</th>
                    <th className="text-center py-3 px-4 font-medium text-slate-700">Classes</th>
                    <th className="text-center py-3 px-4 font-medium text-slate-700">Hours</th>
                    <th className="text-center py-3 px-4 font-medium text-slate-700">Rating</th>
                    <th className="text-center py-3 px-4 font-medium text-slate-700">Earnings</th>
                  </tr>
                </thead>
                <tbody>
                  {teacherAnalytics.map((teacher) => (
                    <tr key={teacher.teacherId} className="border-b border-slate-100 hover:bg-slate-50">
                      <td className="py-3 px-4">
                        <div className="flex items-center gap-3">
                          <div className="w-8 h-8 bg-slate-800 rounded-full flex items-center justify-center text-white font-semibold text-xs">
                            {teacher.teacherName.split(' ').map(n => n[0]).join('')}
                          </div>
                          <span className="font-medium text-slate-800">{teacher.teacherName}</span>
                        </div>
                      </td>
                      <td className="py-3 px-4 text-sm text-slate-600">
                        {teacher.subjects.slice(0, 2).join(', ')}
                        {teacher.subjects.length > 2 && ` +${teacher.subjects.length - 2}`}
                      </td>
                      <td className="py-3 px-4 text-center font-medium text-slate-800">{teacher.totalStudents}</td>
                      <td className="py-3 px-4 text-center font-medium text-slate-800">{teacher.totalClasses}</td>
                      <td className="py-3 px-4 text-center font-medium text-slate-800">{teacher.completedHours}</td>
                      <td className="py-3 px-4 text-center">
                        <span className="inline-flex items-center gap-1 font-medium text-slate-800">
                          ⭐ {teacher.averageRating}
                        </span>
                      </td>
                      <td className="py-3 px-4 text-center font-medium text-green-600">
                        ${teacher.monthlyEarnings.toLocaleString()}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          {/* Performance Summary */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="bg-white p-6 rounded-lg shadow-sm border border-slate-200 text-center">
              <div className="text-3xl font-bold text-slate-800 mb-2">{averageRating.toFixed(1)}</div>
              <div className="text-slate-600">Average Rating</div>
              <div className="text-sm text-green-600 mt-1">⭐ Excellent Performance</div>
            </div>
            <div className="bg-white p-6 rounded-lg shadow-sm border border-slate-200 text-center">
              <div className="text-3xl font-bold text-slate-800 mb-2">{Math.round(totalClasses / totalTeachers)}</div>
              <div className="text-slate-600">Avg Classes per Teacher</div>
              <div className="text-sm text-blue-600 mt-1">📚 High Engagement</div>
            </div>
            <div className="bg-white p-6 rounded-lg shadow-sm border border-slate-200 text-center">
              <div className="text-3xl font-bold text-slate-800 mb-2">{averageRating.toFixed(1)}</div>
              <div className="text-slate-600">Average Rating</div>
              <div className="text-sm text-purple-600 mt-1">⭐ Excellent</div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

interface StatCardProps {
  title: string;
  value: string;
  icon: React.ComponentType<{ className?: string }>;
  color: string;
  change: string;
}

function StatCard({ title, value, icon: Icon, color, change }: StatCardProps) {
  return (
    <div className="bg-white p-6 rounded-lg shadow-sm border border-slate-200">
      <div className="flex items-center justify-between mb-4">
        <div className={`w-12 h-12 ${color} rounded-lg flex items-center justify-center text-white text-xl`}>
          <Icon className="w-6 h-6" />
        </div>
        <span className="text-sm text-green-600 font-medium">{change}</span>
      </div>
      <div className="text-2xl font-bold text-slate-800 mb-1">{value}</div>
      <div className="text-slate-600 text-sm">{title}</div>
    </div>
  );
}

function SimpleCalendar() {
  const currentDate = new Date();
  const currentMonth = currentDate.getMonth();
  const currentYear = currentDate.getFullYear();
  const today = currentDate.getDate();

  const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
  const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();

  const days = [];
  const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

  // Add day headers
  const dayHeaders = dayNames.map(day => (
    <div key={day} className="text-center text-xs font-medium text-slate-600 py-2">
      {day}
    </div>
  ));

  // Add empty cells for days before the first day of the month
  for (let i = 0; i < firstDayOfMonth; i++) {
    days.push(<div key={`empty-${i}`} className="p-2"></div>);
  }

  // Add days of the month
  for (let day = 1; day <= daysInMonth; day++) {
    const isToday = day === today;
    const hasEvent = [5, 12, 18, 22, 28].includes(day); // Mock events

    days.push(
      <div
        key={day}
        className={`p-2 text-center text-sm cursor-pointer hover:bg-slate-100 rounded ${
          isToday ? 'bg-[#B43F3F] text-white font-semibold' : 'text-slate-700'
        }`}
      >
        <div className="relative">
          {day}
          {hasEvent && !isToday && (
            <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-1 h-1 bg-blue-500 rounded-full"></div>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className="grid grid-cols-7 gap-1">
      {dayHeaders}
      {days}
    </div>
  );
}
